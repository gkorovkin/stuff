;; start package.el with emacs
(require 'package)

;; add servers to repository list
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))

;; reload everything
(package-initialize)

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if itâ€™s not.
Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     ;; (package-installed-p 'evil)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; make sure to have downloaded archive description.
;; Or use package-archive-contents as suggested by Nicolas Dudebout
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; detect that we got all packages
(ensure-package-installed 'auto-complete
			  'tangotango-theme
			  'yasnippet
			  'slime
			  'jedi
			  )

;; reload everything
(package-initialize)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; start auto-complete with emacs
;; first of all try to find package - if doesnt exists then try to install and quit
; start auto-complete with emacs
(require 'auto-complete)
(global-auto-complete-mode t)
; do default config for auto-complete
(require 'auto-complete-config)
(ac-config-default)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;lines number
(global-linum-mode 1)
;; disabling linum for eshell-mode
(setq linum-disabled-modes-list '(eshell-mode wl-summary-mode compilation-mode))
(defun linum-on () (unless (or (minibufferp) (member major-mode linum-disabled-modes-list) ) (linum-mode 1) )  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; start yasnippet with emacs
(require 'yasnippet)
(yas-global-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Visual stuff
(show-paren-mode 1)
;; drop *bars
(scroll-bar-mode -1)
;;hide startup message
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(require 'tangotango-theme)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; adding syntax highlight modes
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.ice\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cron\\(tab\\)?\\'" . crontab-mode))
(add-to-list 'auto-mode-alist '("cron\\(tab\\)?\\."    . crontab-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setup CLISP development env
(require 'slime-autoloads)
(setq slime-lisp-implementations
     `((sbcl ("/opt/local/bin/sbcl"))
       (abcl ("/opt/local/bin/abcl"))
       (clisp ("/opt/local/bin/clisp"))))
(slime-setup  '(slime-repl slime-asdf slime-fancy slime-banner))
(setq inferior-lisp-program "sbcl")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setup Jedi (Python ) development env
;;first detect if jedi installed
(message "Python: Be sure you have following packages installed via pip: JEDI, EPC")
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)                 ; optional

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mac meta vs command position
(setq mac-option-modifier 'alt)
(setq mac-command-modifier 'meta)
(setq ns-function-modifier 'control)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(global-set-key [f13] 'recompile)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Node js projects

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; set buffer name like [hostname] buffer
(setq my-hostname (substring (shell-command-to-string "/bin/hostname") 0 -1))
(setq frame-title-format '("[" my-hostname "] %b @ %m"))
(setq backup-directory-alist `(("." . "~/.emacs.d/autosaves")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; setting up a semanticdb 
(semantic-mode 1)
; let's define a function which adds semantic as a suggestion backend to auto complete
; and hook this function to c-mode-common-hook
(defun my:add-semantic-to-autocomplete() (add-to-list 'ac-sources 'ac-source-semantic))
(add-hook 'c-mode-common-hook 'my:add-semantic-to-autocomplete)
(global-semantic-idle-scheduler-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;tab width
(setq-default indent-tabs-mode t)
(setq default-tab-width 4)
(setq-default c-basic-offset 4)
;;(set-face-font 'default "DejaVu Sans Mono-10")
;;(set-default-font "-*-fixed-medium-*-*-*-14-*-*-*-*-*-*-*")
(setq bell-volume 0)
(setq visible-bell 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; special mode for XCoder development
(add-hook 'c++-mode-hook
		  '(lambda()
			(c-set-offset 'innamespace 0)
			(c-set-offset 'inline-open 0)
			)
		  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Dont split windows more then two times vert and(or) horz
(message "Current resolution %dx%d"     (x-display-pixel-height) (x-display-pixel-width))
(setq split-height-threshold ( / (x-display-pixel-height) 2 ) )
(setq split-width-threshold ( / (x-display-pixel-width)  2) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; removing trailing witespaces before saving ( for c++ mode - Xcoder is pretty ass
(defun format_sources() (delete-trailing-whitespace) (tabify (point-min) (point-max) ) )
(add-hook 'c-mode-hook '(lambda() (add-to-list 'write-file-functions 'format_sources) ) )
(add-hook 'c++-mode-hook '(lambda() (add-to-list 'write-file-functions 'format_sources) ) )
